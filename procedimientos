CREATE PROCEDURE `actualizarEstadoProyecto` (IN `_id_proyecto` INT)  BEGIN
	IF ( SELECT EXISTS (SELECT * FROM proyecto WHERE id = _id_proyecto))THEN
		UPDATE proyecto SET estado = "Terminado" WHERE id = _id_proyecto;
        SELECT 1 AS respuesta;
    ELSE
		SELECT 0 AS respuesta;
    END IF;
END$$

CREATE PROCEDURE `asignarEquipoE` (IN `_email` VARCHAR(75), IN `_cargo` VARCHAR(100), IN `_id_equipo` INT)  BEGIN
DECLARE _id_miembro INT;
	    IF ( SELECT NOT EXISTS (SELECT * FROM usuario WHERE email = _email))THEN
			SELECT 0 AS respuesta;
   		ELSE
        SET _id_miembro = (SELECT m.id FROM usuario u INNER JOIN miembro m ON u.id = m.id_usuario WHERE u.email = _email);
        IF ( SELECT NOT EXISTS (SELECT * FROM equipo_miembro WHERE id_equipo=_id_equipo AND id_miembro=_id_miembro))THEN
			INSERT INTO equipo_miembro(cargo, id_equipo, id_miembro) VALUES(_cargo, _id_equipo, _id_miembro);
			SELECT 1 AS respuesta;
        ELSE
			SELECT 2 AS respuesta;
		END IF;
    END IF; 
END$$

CREATE PROCEDURE `asignarRol` (IN `_id` INT, IN `_rol` VARCHAR(45))  BEGIN
IF ( SELECT EXISTS (SELECT * FROM usuario WHERE id= _id))THEN
	UPDATE usuario SET rol = _rol WHERE id = _id;
    SELECT 1 as respuesta;
ELSE
	SELECT 0 as respuesta;
END IF;
END$$

CREATE PROCEDURE `asignarTarea` (IN `_indice` VARCHAR(5), IN `_codigo` VARCHAR(10), IN `_descripcion` TEXT, IN `_tipo` VARCHAR(10), IN `_total_horas` INT, IN `_id_sprint` INT, IN `_id_miembro` INT)  BEGIN
	IF (SELECT NOT EXISTS(SELECT * FROM tarea WHERE codigo=_codigo AND id_sprint=_id_sprint))THEN
		INSERT INTO tarea(indice, codigo, descripcion, tipo, total_horas, id_sprint, id_miembro) VALUES(_indice, _codigo, _descripcion, _tipo, _total_horas, _id_sprint, _id_miembro);
		UPDATE sprint SET total_tareas = total_tareas + 1, total_horas_persona = total_horas_persona + _total_horas WHERE id=_id_sprint;
		SELECT 1 AS respuesta;
	ELSE
		SELECT 0 AS respuesta;
    END IF;
END$$

CREATE PROCEDURE `cambiarFoto` (IN `_email` VARCHAR(75))  BEGIN
	IF ( SELECT EXISTS (SELECT * FROM usuario WHERE email = _email))THEN
		UPDATE usuario SET foto = CONCAT('images/',_email) WHERE email=_email;
        SELECT 1;
    ELSE
		SELECT 0;
    END IF;
END$$

CREATE PROCEDURE `cantidadDias` (IN `_id_sprint` INT)  BEGIN
DECLARE tmp_fechas DATE;
DECLARE _fecha_entrega DATE;
	IF(SELECT EXISTS (SELECT * FROM sprint WHERE id=_id_sprint))THEN
		SET _fecha_entrega = (SELECT fecha_entrega FROM sprint WHERE id=_id_sprint);
		SET tmp_fechas = (SELECT fecha_inicio FROM sprint WHERE id=_id_sprint);
        CREATE TEMPORARY TABLE fechas(dia_habil DATE)engine=memory;
		WHILE tmp_fechas<=_fecha_entrega DO
			IF(SELECT NOT EXISTS (SELECT * FROM dias_inhabiles WHERE dia_inhabil=tmp_fechas))THEN
				insert into fechas select tmp_fechas;
			END IF;
            SET tmp_fechas = (DATE_ADD(tmp_fechas,INTERVAL 1 DAY));
		end while;
		select count(dia_habil) from fechas;
		drop temporary table if exists fechas;
	ELSE
		SELECT 0 AS respuesta;
    END IF;
END$$

CREATE PROCEDURE `crearEquipo` (IN `_nombre` VARCHAR(45), IN `_jornada` VARCHAR(2), IN `_id_manager` INT)  BEGIN
	INSERT INTO equipo(nombre, jornada, id_manager) VALUES(_nombre, _jornada, _id_manager);
    SELECT 1 as respuesta;
END$$

CREATE PROCEDURE `crearPila` (IN `_codigo` VARCHAR(10), IN `_historia` TEXT, IN `_importancia` VARCHAR(2), IN `_estimado_horas` INT, IN `_id_proyecto` INT)  BEGIN
	    IF ( SELECT EXISTS (SELECT * FROM pila WHERE codigo = _codigo AND id_proyecto = _id_proyecto))THEN 
			SELECT 0 as respuesta;
   		ELSE
			INSERT INTO pila(codigo, historia, importancia, estimado_horas, id_proyecto) VALUES(_codigo, _historia, _importancia, _estimado_horas, _id_proyecto);
            SELECT 1 as respuesta;
    END IF; 
END$$

CREATE PROCEDURE `crearProyecto` (IN `_codigo` VARCHAR(10), IN `_nombre` VARCHAR(100), IN `_descripcion` TEXT, IN `_objetivo` TEXT, IN `_id_manager` INT, IN `_id_equipo` INT)  BEGIN
	IF ( SELECT EXISTS (SELECT * FROM proyecto WHERE codigo = _codigo))THEN
		SELECT 0;
	ELSE
		INSERT INTO proyecto(codigo, nombre, descripcion, objetivo, id_manager, id_equipo) VALUES(_codigo, _nombre, _descripcion, _objetivo, _id_manager, _id_equipo);
		SELECT 1;
    END IF;
END$$

CREATE PROCEDURE `crearSprint` (IN `_codigo` VARCHAR(10), IN `_fecha_entrega` DATE, IN `_id_proyecto` INT)  BEGIN
IF ( SELECT EXISTS (SELECT * FROM sprint WHERE codigo = _codigo))THEN
	SELECT 0;
ELSE
	INSERT INTO sprint(codigo, fecha_inicio, fecha_entrega, id_proyecto) VALUES(_codigo, CURDATE(), _fecha_entrega, _id_proyecto);
	SELECT 1;
END IF;
END$$

CREATE PROCEDURE `graficoHoras` (IN `_id_sprint` INT)  BEGIN
	IF (SELECT EXISTS (SELECT * FROM seguimiento WHERE id_sprint=_id_sprint))THEN
		SELECT sp.total_horas, sp.total_tareas, se.tareas_persona_pendientes, se.horas_persona_pendientes, se.fecha_seguimiento
        FROM seguimiento se INNER JOIN sprint sp ON sp.id=se.id_sprint WHERE sp.id=_id_sprint;
    ELSE
    SELECT 0;
    END IF;
END$$

CREATE PROCEDURE `idManager` (IN `_id_usuario` INT)  BEGIN
	    IF ( SELECT EXISTS (SELECT * FROM usuario WHERE id=_id_usuario))THEN
			IF ( SELECT EXISTS (SELECT * FROM manager WHERE id_usuario = _id_usuario))THEN 
				SELECT m.id FROM usuario u INNER JOIN manager m ON u.id=m.id_usuario WHERE m.id_usuario=_id_usuario;
			ELSE
				SELECT 2 as respuesta;
			END IF;
		ELSE
			SELECT 0 as respuesta;
    END IF;
END$$

CREATE PROCEDURE `idMiembro` (IN `_id_usuario` INT)  BEGIN
	    IF ( SELECT EXISTS (SELECT * FROM usuario WHERE id=_id_usuario))THEN
			IF ( SELECT EXISTS (SELECT * FROM miembro WHERE id_usuario = _id_usuario))THEN 
				SELECT m.id FROM usuario u INNER JOIN miembro m ON u.id=m.id_usuario WHERE m.id_usuario=_id_usuario;
			ELSE
				SELECT 2 as respuesta;
			END IF;
		ELSE
			SELECT 0 as respuesta;
    END IF;
END$$

CREATE PROCEDURE `insertarDiaInhabil` (IN `_dia_inhabil` DATE, IN `_id_sprint` INT)  BEGIN
IF ( SELECT EXISTS (SELECT * FROM dias_inhabiles WHERE dia_inhabil = _dia_inhabil AND id_sprint = _id_sprint))THEN
	SELECT 0;
ELSE
	INSERT INTO dias_inhabiles(dia_inhabil, id_sprint) VALUES(_dia_inhabil, _id_sprint);
	SELECT 1;
	END IF;
END$$

CREATE PROCEDURE `insertarManager` (IN `_experiencia` VARCHAR(100), IN `_id_usuario` INT)  BEGIN
	    IF ( SELECT EXISTS (SELECT * FROM usuario WHERE id = _id_usuario))THEN 
			IF ( SELECT NOT EXISTS (SELECT * FROM manager WHERE id_usuario = _id_usuario))THEN 
				INSERT INTO manager(experiencia, id_usuario) VALUES (_experiencia, _id_usuario);
                SELECT 1 as respuesta;
			ELSE
				SELECT 2 as respuesta;
            END IF;
   		ELSE
			SELECT 0 as respuesta;
    END IF;
END$$

CREATE PROCEDURE `insertarMiembro` (IN `_destrezas` VARCHAR(100), IN `_id_usuario` INT)  BEGIN
	    IF ( SELECT EXISTS (SELECT * FROM usuario WHERE id = _id_usuario))THEN 
			IF ( SELECT NOT EXISTS (SELECT * FROM miembro WHERE id_usuario = _id_usuario))THEN 
				INSERT INTO miembro(destrezas, id_usuario) VALUES (_destrezas, _id_usuario);
                SELECT 1 as respuesta;
			ELSE
				SELECT 2 as respuesta;
            END IF;
   		ELSE
			SELECT 0 as respuesta;
    END IF; 
END$$

CREATE PROCEDURE `insertarProyectoSprint` (IN `_indice` VARCHAR(3), IN `_codigo` VARCHAR(10), IN `_historia` TEXT, IN `_importancia` VARCHAR(2), IN `_estimado_horas` INT, IN `_id_sprint` INT, IN `_id_proyecto` INT)  BEGIN
	    IF ( SELECT EXISTS (SELECT * FROM proyecto_sprint WHERE codigo = _codigo))THEN 
			SELECT 0 AS respuesta;
   		ELSE
			INSERT INTO proyecto_sprint(indice ,codigo, historia, importancia, estimado_horas, id_sprint, id_proyecto) VALUES(_indice, _codigo, _historia, _importancia, _estimado_horas, _id_sprint, _id_proyecto);
            UPDATE sprint SET total_horas = total_horas + _estimado_horas WHERE id = _id_sprint;
            SELECT 1 AS respuesta;
    END IF; 
END$$

CREATE PROCEDURE `insertarUsuario` (IN `_nombre` VARCHAR(45), IN `_apellidos` VARCHAR(75), IN `_email` VARCHAR(75), IN `_login` VARCHAR(55), IN `_password` VARCHAR(35), IN `_profesion` VARCHAR(40))  BEGIN
DECLARE _retorno VARCHAR(40);
	    IF ( SELECT EXISTS (SELECT * FROM usuario WHERE login = _login))THEN 
            SELECT 2 as respuesta;
   		ELSE
        	IF ( SELECT EXISTS (SELECT * FROM usuario WHERE email = _email))THEN 
				SELECT 0 as respuesta;
   			ELSE
				INSERT INTO usuario(nombre, apellidos, email, login, password, profesion) VALUES(_nombre, _apellidos, _email, _login, _password, _profesion);
                SELECT 1 as respuesta;
            END IF;
    END IF;
END$$

CREATE PROCEDURE `listarDias` (IN `_id_sprint` INT)  BEGIN
DECLARE tmp_fechas DATE;
DECLARE _fecha_entrega DATE;
	IF(SELECT EXISTS (SELECT * FROM sprint WHERE id=_id_sprint))THEN
		SET _fecha_entrega = (SELECT fecha_entrega FROM sprint WHERE id=_id_sprint);
		SET tmp_fechas = (SELECT fecha_inicio FROM sprint WHERE id=_id_sprint);
        CREATE TEMPORARY TABLE fechas(dia_habil DATE)engine=memory;
		WHILE tmp_fechas<=_fecha_entrega DO
			IF(SELECT NOT EXISTS (SELECT * FROM dias_inhabiles WHERE dia_inhabil=tmp_fechas))THEN
				insert into fechas select tmp_fechas;
			END IF;
            SET tmp_fechas = (DATE_ADD(tmp_fechas,INTERVAL 1 DAY));
		end while;
		select dia_habil from fechas;
		drop temporary table if exists fechas;
	ELSE
		SELECT 0 AS respuesta;
    END IF;
END$$

CREATE PROCEDURE `listarEquipos` (IN `_id_manager` INT)  BEGIN
	    IF ( SELECT EXISTS (SELECT * FROM equipo WHERE id_manager = _id_manager))THEN 
			SELECT * FROM equipo WHERE id_manager = _id_manager;
   		ELSE
			SELECT 0 as respuesta;
		END IF; 
END$$

CREATE PROCEDURE `listarEquiposMi` (IN `_id_miembro` INT)  BEGIN
	    IF ( SELECT EXISTS (SELECT * FROM equipo_miembro WHERE id_miembro = _id_miembro))THEN
			SELECT  e.id, e.nombre, e.jornada, em.id AS id_equipo, em.cargo FROM equipo e INNER JOIN equipo_miembro em ON e.id=em.id_equipo WHERE em.id_miembro = _id_miembro;
   		ELSE
			SELECT 0 as respuesta;
		END IF; 
END$$

CREATE PROCEDURE `listarEquiposProyectos` (IN `_id_manager` INT)  BEGIN
 IF ( SELECT EXISTS (SELECT * FROM equipo WHERE id_manager = _id_manager))THEN 
			IF ( SELECT EXISTS (SELECT * FROM proyecto WHERE id_equipo = _id_manager))THEN 
				SELECT * FROM equipo e INNER JOIN proyecto p ON e.id=p.id_equipo WHERE e.id_manager = _id_manager;
			ELSE
				SELECT 2 as respuesta;
			END IF; 
   		ELSE
            SELECT 0 as respuesta;
    END IF; 
END$$

CREATE PROCEDURE `listarEsfuerzo` (IN `_id_sprint` INT)  BEGIN
DECLARE _id_tarea INT;
	IF (SELECT EXISTS (SELECT * FROM tarea WHERE id_sprint=_id_sprint))THEN
		IF (SELECT EXISTS (SELECT * FROM tarea t INNER JOIN esfuerzo e ON t.id=e.id_tarea WHERE id_sprint=_id_sprint))THEN
			SELECT  table1.id, table1.indice, table1.codigo, table1.descripcion, table1.tipo, table1.estado, table1.total_horas, table1.id_miembro,  table1.id, table1.cantidad, table1.fecha_dia, table1.id_tarea, group_concat(table1.cantidad separator ',') cantidades 
			FROM (SELECT t.id, t.indice, t.codigo, t.descripcion, t.tipo, t.estado, t.total_horas, t.id_miembro, e.id_tarea, e.cantidad, e.fecha_dia FROM tarea t INNER JOIN esfuerzo e ON t.id=e.id_tarea WHERE t.id_sprint=_id_sprint
			ORDER BY e.cantidad) table1 GROUP BY table1.id_tarea;
		ELSE
			SELECT * FROM tarea WHERE id_sprint=_id_sprint;
        END IF;
	ELSE
		SELECT 0 AS respuesta;
    END IF;
END$$

CREATE PROCEDURE `listarInhabiles` (IN `_id_sprint` INT)  BEGIN
	IF (SELECT EXISTS (SELECT * FROM dias_inhabiles WHERE id_sprint=_id_sprint))THEN
		SELECT * FROM dias_inhabiles WHERE id_sprint=_id_sprint;
    ELSE
		SELECT 0 AS respuesta;
    END IF;
END$$

CREATE PROCEDURE `listarMiembrosE` (IN `_id_proyecto` INT)  BEGIN
DECLARE _id_equipo INT;
	IF ( SELECT EXISTS (SELECT * FROM proyecto WHERE id = _id_proyecto))THEN
		SET _id_equipo = (SELECT id_equipo FROM proyecto WHERE id=_id_proyecto);
        SELECT m.id, u.nombre, u.apellidos, e.cargo FROM equipo_miembro e INNER JOIN miembro m ON e.id_miembro=m.id INNER JOIN usuario u ON m.id_usuario=u.id WHERE e.id_equipo=_id_equipo;
	ELSE
		SELECT 0 as respuesta;
	END IF; 
END$$

CREATE PROCEDURE `listarMiembrosEquipo` (IN `_id_equipo` INT)  BEGIN
	IF ( SELECT EXISTS (SELECT * FROM equipo_miembro WHERE id_equipo = _id_equipo))THEN
        SELECT m.id, u.nombre, u.apellidos, e.cargo, m.destrezas FROM equipo_miembro e INNER JOIN miembro m ON e.id_miembro=m.id INNER JOIN usuario u ON m.id_usuario=u.id WHERE e.id_equipo=_id_equipo;
	ELSE
		SELECT 0 as respuesta;
	END IF; 
END$$

CREATE PROCEDURE `listarMiembrosEquipos` (IN `_id_manager` INT)  BEGIN
	IF ( SELECT EXISTS (SELECT * FROM equipo WHERE id_manager = _id_manager))THEN
        SELECT e.id, m.id, u.nombre, u.apellidos, em.cargo FROM equipo e INNER JOIN equipo_miembro em ON e.id=em.id_equipo INNER JOIN miembro m ON em.id_miembro=m.id INNER JOIN usuario u ON m.id_usuario=u.id 
        WHERE e.id_manager=_id_manager ORDER BY e.id;
	ELSE
		SELECT 0 as respuesta;
	END IF; 
END$$

CREATE PROCEDURE `listarPila` (IN `_id_proyecto` INT)  BEGIN
	IF ( SELECT EXISTS (SELECT * FROM pila WHERE id_proyecto = _id_proyecto))THEN 
		SELECT * FROM pila WHERE id_proyecto = _id_proyecto
		ORDER BY importancia DESC;
	ELSE
            SELECT 0 as respuesta;
    END IF; 
END$$

CREATE PROCEDURE `listarProyectos` (IN `_id_equipo` INT)  BEGIN
	    IF ( SELECT EXISTS (SELECT * FROM equipo WHERE id = _id_equipo))THEN 
			IF ( SELECT EXISTS (SELECT * FROM proyecto WHERE id_equipo = _id_equipo))THEN 
				SELECT * FROM proyecto WHERE id_equipo = _id_equipo
                ORDER BY fecha DESC;
			ELSE
				SELECT 2 as respuesta;
			END IF; 
   		ELSE
            SELECT 0 as respuesta;
    END IF; 
END$$

CREATE PROCEDURE `listarProyectoSprint` (IN `_id_sprint` INT, IN `_id_proyecto` INT)  BEGIN
	    IF ( SELECT EXISTS (SELECT * FROM proyecto_sprint WHERE id_sprint = _id_sprint AND id_proyecto = _id_proyecto))THEN
			SELECT * FROM proyecto_sprint WHERE id_sprint = _id_sprint AND id_proyecto = _id_proyecto
            ORDER BY CAST(indice AS UNSIGNED);
   		ELSE
			SELECT 0 as respuesta;
		END IF; 
END$$

CREATE PROCEDURE `listarSeguimiento` (IN `_id_sprint` INT)  BEGIN
	IF (SELECT EXISTS (SELECT * FROM seguimiento WHERE id_sprint=_id_sprint))THEN
		SELECT * FROM seguimiento WHERE id_sprint = _id_sprint;
    ELSE
		SELECT 0;
    END IF;
END$$

CREATE PROCEDURE `listarSprint` (IN `_id_proyecto` INT)  BEGIN
	    IF ( SELECT EXISTS (SELECT * FROM sprint WHERE id_proyecto = _id_proyecto))THEN
			SELECT * FROM sprint WHERE id_proyecto=_id_proyecto;
   		ELSE
			SELECT 0 as respuesta;
		END IF; 
END$$

CREATE PROCEDURE `listarTareas` (IN `_id_sprint` INT)  BEGIN
	IF(SELECT EXISTS (SELECT * FROM tarea WHERE id_sprint=_id_sprint))THEN
		SELECT * FROM tarea WHERE id_sprint=_id_sprint ORDER by indice;
    ELSE
		SELECT 0 AS respuesta;
    END IF;
END$$

CREATE PROCEDURE `login` (IN `_login` VARCHAR(55), IN `_password` VARCHAR(35))  BEGIN
	    IF ( SELECT EXISTS (SELECT * FROM usuario WHERE login = _login AND password = _password))THEN 
			SELECT id, nombre, apellidos, email, login, rol, foto FROM usuario WHERE login = _login;
   		ELSE
			SELECT 0 as response;
    END IF; 
END$$

CREATE PROCEDURE `modificarEstado` (IN `_estado` VARCHAR(15), IN `_id_tarea` INT)  BEGIN
	IF(SELECT EXISTS (SELECT * FROM tarea WHERE id=_id_tarea) )THEN
		UPDATE tarea SET estado=_estado WHERE id=_id_tarea;
        SELECT 1 AS respuesta;
    ELSE
		SELECT 0 AS respuesta;
    END IF;
END$$

CREATE PROCEDURE `quemarHoras` (IN `_cantidad` INT, IN `_id_tarea` INT, IN `_id_sprint` INT)  BEGIN
DECLARE _tareas_pendientes INT DEFAULT 0; 
DECLARE _horas_pendientes INT DEFAULT 0;
DECLARE _horas_completas INT DEFAULT 0;
DECLARE _id_esfuerzo INT;
	IF ( SELECT EXISTS (SELECT * FROM esfuerzo WHERE fecha_dia = CURDATE() AND id_tarea=_id_tarea))THEN 
        SELECT 0 as respuesta;
   		ELSE
        IF ( SELECT EXISTS (SELECT * FROM esfuerzo WHERE cantidad <= _cantidad  AND fecha_dia=(CURDATE()-1) ))THEN
			INSERT INTO esfuerzo(cantidad, fecha_dia, id_tarea) VALUES(_cantidad, CURDATE(),_id_tarea);
			SET _id_esfuerzo = (@@identity);
            IF (_cantidad = 0)THEN
				SET _tareas_pendientes = (SELECT (total_tareas - 1) FROM sprint WHERE id=_id_sprint);
                UPDATE tarea SET estado="Terminado" WHERE id=_id_tarea;
			ELSE
				SET _tareas_pendientes = (SELECT (total_tareas) FROM sprint WHERE id=_id_sprint);
			END IF;           
            SET _horas_completas = (SELECT (t.total_horas - e.cantidad) FROM tarea t INNER JOIN esfuerzo e ON t.id = e.id_tarea WHERE e.id = _id_esfuerzo);   
            SET _horas_pendientes = (SELECT (total_horas_persona - _horas_completas) FROM sprint WHERE id=_id_sprint);   
			INSERT INTO seguimiento(tareas_persona_pendientes, 	horas_persona_pendientes, fecha_seguimiento, id_sprint) VALUES(_tareas_pendientes, _horas_pendientes, CURDATE(), _id_sprint);
            SELECT 1 as respuesta;
		ELSE
        SELECT 2 AS respuesta;
        END IF;
    END IF; 
END$$
